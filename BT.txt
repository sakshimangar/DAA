// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;
contract TipJar {
 int depmoney;
 int withdraw_trans;
 int balance;
 address public owner; 
 constructor() {
 owner = msg.sender;
 }

 modifier onlyOwner() {
 require(msg.sender == owner, "Only the owner can call this function");
 _;
 }

 function withdraw(int witm) public onlyOwner {
 withdraw_trans= witm;
 depmoney=depmoney-witm;
 payable(owner).transfer(address(this).balance);
 }

 function deposit(int depm) public payable {
 depmoney = depm;


 }
 function getBalance() public view returns (int256) {
 
 return depmoney;
 
}

                     ******************* STUDENT ************************************

// SPDX-License-Identifier: MIT
pragma solidity ^0.8.18;
contract Student_Management{
 struct Student{
 int stud_id;
 string name;
 string department;
 }
 Student[] Students;
 function add_stud(int stud_id,string memory Name, string memory department) public{
 Student memory stud = Student(stud_id,Name,department);
 Students.push(stud);
 }

 function getStudent(int stud_id) public view returns(string memory, string memory) {
 for (uint i= 0;i<Students.length;i++){
 Student memory stud=Students[i];
 if(stud.stud_id == stud_id){
 return (stud.name,stud.department);
 }
 }
 return ("Not Found","Not Found");
 }
}